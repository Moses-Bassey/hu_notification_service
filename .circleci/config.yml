# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.7
  docker: circleci/docker@1.5.0

executors:
  docker-publisher:
    environment:
      IMAGE_TAG: hk/hu-notification:latest
    docker: # Each job requires specifying an executor
      # (either docker, macos, or machine), see
      - image: 'docker:stable'

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    docker:
      - image: cimg/node:22.11.0
      - image: cimg/mysql:5.7
        environment:
          MYSQL_DATABASE: syncventory_notification_test
          MYSQL_USER: syncventory
          MYSQL_PASSWORD: syncventory
          MYSQL_ROOT_PASSWORD: syncventory
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # Checkout the code as the first step.
      - checkout
      # Next, the node orb's install-packages step will install the dependencies from a package.json.
      # The orb install-packages step will also automatically cache them for faster future runs.
      - node/install-packages:
          # If you are using yarn, change the line below from "npm" to "yarn"
          pkg-manager: yarn
      - run:
          name: Run lint
          command: yarn lint

#      - run:
#          name: Database Setup
#          command: yarn migrate:up
#          environment:
#            DATABASE_USER: syncventory
#            DATABASE_NAME: syncventory_notification_test
#            DATABASE_PASSWORD: syncventory
#            DATABASE_HOST: localhost
#            DATABASE_PORT: 3306
#            DATABASE_DIALECT: mysql

      - run:
          name: Run tests
          command: yarn test
          environment:
            DATABASE_USER: syncventory
            DATABASE_NAME: syncventory_notification_test
            DATABASE_PASSWORD: syncventory
            DATABASE_HOST: localhost
            DATABASE_PORT: 3306
            DATABASE_DIALECT: mysql

  build:
    # Use docker-publisher from above as the Docker container to run this job in
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker

      - run: mkdir -p workspace

      - run:
          name: Build Docker image
          # Tag using the image tag above
          command: docker build --tag "${IMAGE_TAG}" .

      # Archive and persist the Docker image
      - run:
          name: Archive Docker image
          command: docker save --output image.tar "${IMAGE_TAG}"

      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  push-to-docker-hub:
    # Use docker-publisher from above as the Docker container to run this job in
    executor: docker-publisher

    steps:
      # Set up a separate Docker environment to run `docker` commands in
      - setup_remote_docker

      # Load and un-archive the Docker image
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load Docker image
          command: docker load --input /tmp/workspace/image.tar

      # Log in to Docker Hub and push the image
      - run:
          name: Publish Docker image
          command: |
            echo "${DOCKERHUB_PASS}" | docker login --username "${DOCKERHUB_USERNAME}" --password-stdin
            docker push "${IMAGE_TAG}"

#  deploy-demo:
#    docker:
#      - image: circleci/python:2.7.14
#    steps:
#      - run:
#          name: Deploy Demo
#          command: |
#            curl http://45.79.216.168:9087/deploy

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  Build-And-Push:
    jobs:
      - test
      - build:
          requires:
            - test
          # Only build from the develop branch
          filters:
            branches:
              only: develop
      # Push the image second
      - push-to-docker-hub:
          context: app-deploy
          # Build needs to finish first
          requires:
            - build
          # Only push images from the develop branch
          filters:
            branches:
              only: develop
#      - deploy-demo:
#          requires:
#            - push-to-docker-hub
#          filters:
#            branches:
#              only: develop